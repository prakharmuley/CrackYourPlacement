// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V + 1; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}// } Driver Code Ends


/*Complete the function below*/

class Solution {
    public boolean dfs(int node, ArrayList<ArrayList<Integer>> adj,boolean[] v1, boolean[] v2)
    {
        v1[node]=true;
        v2[node]=true;
        for(int x: adj.get(node))
        {
            if(!v1[x]){ 
             if( dfs(x,adj,v1,v2)) return true;
            }
            else if(v2[x])
            {
              return true;
            }
        }
        v2[node]=false;
        
        return false;
    }
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean v1[]=new boolean[V+1];
        boolean v2[]=new boolean[V+1];
        for(int i=0;i<V;i++)
        {
            if(!v1[i])
            {
             if(dfs(i,adj,v1,v2)) return true;
            }
            
            
        }
        return false;
    }
}
