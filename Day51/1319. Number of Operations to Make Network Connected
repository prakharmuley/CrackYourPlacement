class Solution {
    public void dfs(int node, List<Integer>[] adj, boolean[] vis)
    {
        vis[node]=true;
        for(int x: adj[node])
        {
            if(!vis[x])
            {
                vis[x]=true;
                dfs(x,adj,vis);
            }
           
           
        }
    }
    public int makeConnected(int n, int[][] connections) {
       if (connections.length < n - 1) return -1;
       List<Integer> adj[]=new ArrayList[n];
       boolean[] vis=new boolean[n]; 
       int c=0; 
       for(int i=0;i<n;i++) adj[i]=new ArrayList<>();
       for(int i=0;i<connections.length;i++)
       {
           adj[connections[i][0]].add(connections[i][1]);
           adj[connections[i][1]].add(connections[i][0]);
       }
       for(int i=0;i<n;i++)
       {
           if(!vis[i])
           {
               c++;
               dfs(i,adj,vis);
           }
       }
        
       return c-1; 
        
        
    }
}
