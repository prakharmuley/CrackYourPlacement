/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> mp=new TreeMap<>();
        Queue<Tuple> q=new LinkedList<>();
        q.offer(new Tuple(root,0,0));
        while(!q.isEmpty())
        {
            Tuple tuple=q.poll();
            TreeNode node=tuple.node;
            int x=tuple.v;
            int y=tuple.l;
            if(!mp.containsKey(x))
            {
                mp.put(x,new TreeMap<>());
            }
            if(!mp.get(x).containsKey(y))
            {
                mp.get(x).put(y,new PriorityQueue<>());
            }
            mp.get(x).get(y).offer(node.val);
            if(node.left!=null) q.offer(new Tuple(node.left,x-1,y+1));
            if(node.right!=null) q.offer(new Tuple(node.right,x+1,y+1));    
        }
        List<List<Integer>> vertical=new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> ys: mp.values())
        {
            vertical.add(new ArrayList<>());
            for(PriorityQueue<Integer> nodes: ys.values())
            {
                while(!nodes.isEmpty())
                {
                    vertical.get(vertical.size()-1).add(nodes.poll());
                }
            }
        }
        return vertical;
    }
}
class Tuple {
    TreeNode node;
    int v;
    int l;
    public Tuple(TreeNode node, int v, int l)
    {
        this.node=node;
        this.v=v;
        this.l=l;
    }
}
