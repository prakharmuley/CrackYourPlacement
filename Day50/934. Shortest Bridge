class Solution {
    public void paint(int[][] g)
    {
        int n=g.length;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
             if(g[i][j]==1)
             {
                 dfs(i,j,g); 
                 return;
             }
                
              
            }
        }
    }
    public void dfs(int i, int j,int[][] g)
    {
        int n=g.length;
        if(i<0||i>=n||j<0||j>=n||g[i][j]!=1)
        {
            return;
        }
        g[i][j]=2;
      
        dfs(i,j+1,g);
        dfs(i,j-1,g);
        dfs(i+1,j,g);
        dfs(i-1,j,g);
    }
   
    
    public int shortestBridge(int[][] g) {
        int n=g.length;
        int c=0-1;
        boolean vis[][]=new boolean[n][n];
        Queue<int[]> q=new LinkedList<>();
        
        paint(g);
         for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
             
                if(g[i][j]==2) {q.offer(new int[]{i,j}); vis[i][j]=true;}
              
            }
        }
        while(!q.isEmpty())
        {
            int l=q.size();
            ++c;
            for(int k=0;k<l;k++)
            {
                int[] p=q.poll();
                int x=p[0];
                int y=p[1];
                if(g[x][y]==1) return c-1;
           
                if(x-1>=0&&!vis[x-1][y])
                {
                    q.offer(new int[]{x-1,y});
                   vis[x-1][y]=true;
                }
                  if(x+1<n&&!vis[x+1][y])
                {
                    q.offer(new int[]{x+1,y});
                    vis[x+1][y]=true;
                }
                  if(y-1>=0&&!vis[x][y-1])
                {
                    q.offer(new int[]{x,y-1});
                       vis[x][y-1]=true;  
                }
                  if(y+1<n&&!vis[x][y+1])
                {
                    q.offer(new int[]{x,y+1});
                        vis[x][y+1]=true;
                }
            }
          
        }
        return -1;
        
        
    }
}
