/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Long,Integer> mp=new HashMap<>();
    int ans=0;
    public void dfs(TreeNode root, int k, long cursum)
    {
        if(root==null) return;
        cursum+=(long)root.val;
        if(cursum==(long)k) ans++;
        ans+=mp.getOrDefault(cursum-(long)k,0);
        if(!mp.containsKey(cursum))
        {
            mp.put(cursum,1);
        }else
        {
            mp.put(cursum,mp.get(cursum)+1);
        }
        dfs(root.left,k,cursum);
        dfs(root.right,k,cursum);
        mp.put(cursum,mp.get(cursum)-1);
    }
    public int pathSum(TreeNode root, int k) {
        dfs(root,k,0L);
        return ans;
        
    }
}
