/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void dfs(TreeNode root,String s,List<String> l)
    {
        if(root==null) return;
        if(root.val==-1000) return;
        if(root.left==null&&root.right==null)
        {
            if(root.val==-1000) return;
            s+=root.val;
            l.add(s.substring(0,s.length()));
            
            s=new String();
            root.val=-1000;
            return;
        }
        s+=String.valueOf(root.val)+"->";
        dfs(root.left,s,l);
        dfs(root.right,s,l);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> l=new ArrayList<>();
        String s=new String();
        s=new String();
        dfs(root,s,l);
        return l;
    }
}
