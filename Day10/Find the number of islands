// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}// } Driver Code Ends


class Solution {
    public void dfs(int i, int j, char[][] g)
    {
        if(i<0||j<0||i>=g.length||j>=g[0].length||g[i][j]=='0') return;
        g[i][j]='0';
        
        dfs(i,j+1,g);
        dfs(i,j-1,g);
        dfs(i+1,j+1,g);
        dfs(i-1,j-1,g);
        dfs(i-1,j+1,g);
        dfs(i+1,j-1,g);
        dfs(i+1,j,g);
        dfs(i-1,j,g);
       
    }
    public int numIslands(char[][] g) {
        int ans=0;
        for(int i=0;i<g.length;i++)
        {
            for(int j=0;j<g[0].length;j++)
            {
                if(g[i][j]=='1')
                {
                    dfs(i,j,g);
                    ans++;
                }
                
            }
        }
        return ans;
    }
}
