/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode fst=null;
    TreeNode mid=null;
    TreeNode last=null;
   
    TreeNode prev=new TreeNode(Integer.MIN_VALUE);
    public void dfs(TreeNode root)
    {
        if(root==null) return;
        dfs(root.left);
        if(root.val<prev.val)
        {
           if(fst==null)
           {
               fst=prev;
               mid=root;
           }
           else
           {
               last=root;
           }      
        }
        prev=root;  
        dfs(root.right);
           
        
    }
    public void recoverTree(TreeNode root) {
        dfs(root);
        if(fst!=null&&last!=null) 
        {
            fst.val^=last.val;
            last.val^=fst.val;
            fst.val^=last.val;
        }
        else
        {
            fst.val^=mid.val;
            mid.val^=fst.val;
            fst.val^=mid.val;
        }
        
        
    }
}
