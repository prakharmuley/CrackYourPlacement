/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode merge(ListNode l1, ListNode l2)
    {
        ListNode cur=new ListNode(1);
        ListNode dummy=cur; 
        while(l1!=null&&l2!=null)
        {
            if(l1.val<l2.val)
            {
                cur.next=l1;
                l1=l1.next;
            }
            else
            {
                cur.next=l2;
                l2=l2.next;
            }
            cur=cur.next;
        }
        if(l1!=null)
        {
            cur.next=l1;
            l1=l1.next;
            cur=cur.next;
            
        }
        if(l2!=null)
        {
            cur.next=l2;
            l2=l2.next;
            cur=cur.next;
        }
        return dummy.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode temp=head;
        ListNode mid=null;
        ListNode slow=head;
        ListNode fast=head;
        ListNode slow_prev=null;
        while(fast!=null&&fast.next!=null)
        {
            slow_prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        slow_prev.next=null;
        ListNode h1=sortList(head);
        ListNode h2=sortList(slow);
        return merge(h1,h2);
        
    }
}
