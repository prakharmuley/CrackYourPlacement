/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> q=new LinkedList<>();
  
        q.offer(new Pair(root,0));
        int ans=0;
        int tot=0;
        while(!q.isEmpty())
        {
            int n=q.size();
            int f=0;
            int l=0;
            int mn=q.peek().idx;
            for(int i=1;i<=n;i++)
            {
            Pair p=q.poll();
            TreeNode cur=p.node;
            int idx=p.idx-mn;    
            if(i==1) f=idx;
            if(i==n) l=idx;    
            if(cur.left!=null) {q.offer(new Pair(cur.left,(2*idx)+1)); }      
            if(cur.right!=null) {q.offer(new Pair(cur.right,(2*idx)+2));}
           
            }            
            ans=Math.max(ans,l-f+1);    
        }
            
        return ans;
    }
}
class Pair{
    TreeNode node;
    int idx;
    public Pair(TreeNode node, int idx)
    {
        this.node=node;
        this.idx=idx;
    }
}
