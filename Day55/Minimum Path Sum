class Solution {
    Integer dp[][];
    public int dfs(int i, int j, int n , int m, int[][] g)
    {
        if(i>=n||j>=m) return Integer.MAX_VALUE; 
        if(i==n-1&&j==m-1) return g[i][j];
        if(dp[i][j]!=Integer.MAX_VALUE) return dp[i][j];
          
        int l=dfs(i,j+1,n,m,g);
        int r=dfs(i+1,j,n,m,g);
        
      
        return dp[i][j]=Math.min(l,r)+g[i][j];
    }
    public int minPathSum(int[][] g) {
        int n=g.length;
        int m=g[0].length;
        dp=new Integer[n+1][m+1];
        for(int i=0;i<=n;i++) Arrays.fill(dp[i],Integer.MAX_VALUE);
        return dfs(0,0,n,m,g);
        
    }
}
