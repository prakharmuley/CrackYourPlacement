//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}

// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    public static void dfs(int i, int j, ArrayList<String> path,int n, int[][] m, String s)
    {
        if(i<0||j<0||i>=n||j>=n||m[i][j]==0)
        {
            if(s.length()>=1){
            s=s.substring(0,s.length()-1);
            }
            return;
        }
        if(i==n-1&&j==n-1)
        {
            path.add(s);
            s=new String();
            return;
        }
        m[i][j]=0;
        dfs(i+1,j,path,n,m,s+"D");
        dfs(i-1,j,path,n,m,s+"U");
        dfs(i,j+1,path,n,m,s+"R");
        dfs(i,j-1,path,n,m,s+"L");
        m[i][j]=1;
    }
    public static ArrayList<String> findPath(int[][] m, int n) {
        boolean vis[][]=new boolean[n][n];
        ArrayList<String> path=new ArrayList<>();
        
        if(m[0][0]==-1||m[n-1][n-1]==0) 
        {
            path.add("-1");
            return path;
        }
        String s=new String();
        dfs(0,0,path,n,m,s);
        Collections.sort(path);
        return path;
    }
}
