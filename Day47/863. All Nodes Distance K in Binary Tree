/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void markParents(Map<TreeNode,TreeNode> par, TreeNode root)
    {
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty())
        {
            TreeNode cur=q.poll();
            if(cur.left!=null)
            {
                par.put(cur.left,cur);
                q.offer(cur.left);
            }
             if(cur.right!=null)
            {
                par.put(cur.right,cur);
                q.offer(cur.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode> par=new HashMap<>();
        Map<TreeNode,Boolean> vis=new HashMap<>();
        markParents(par,root);
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(target);
        vis.put(target,true);
        int c=0;
        while(!q.isEmpty())
        {
            int l=q.size();
            if(c==k) break;
            c++;
            for(int i=0;i<l;i++){
            TreeNode cur=q.poll();
            if(cur.left!=null&&vis.get(cur.left)==null)
            {
                q.offer(cur.left);
                vis.put(cur.left,true);
            }
            if(cur.right!=null&&vis.get(cur.right)==null)
            {
                q.offer(cur.right);
                vis.put(cur.right,true);
            }
            if(par.get(cur)!=null&&vis.get(par.get(cur))==null)
            {
                q.offer(par.get(cur));
                vis.put(par.get(cur),true);
            }  
            }
        }
        List<Integer> nodes=new ArrayList<>();
        while(!q.isEmpty())
        {
            nodes.add(q.poll().val);
        }
        
        return nodes;
        
    }
}
